{"version":3,"sources":["webpack:///C:/Users/liuxingyu/Desktop/TurboTrainning-main/TurboTrainning-main_uni/cmpts/public/poster/wxa-plugin-canvas/index/index.vue?91f5","webpack:///C:/Users/liuxingyu/Desktop/TurboTrainning-main/TurboTrainning-main_uni/cmpts/public/poster/wxa-plugin-canvas/index/index.vue?dc20","webpack:///C:/Users/liuxingyu/Desktop/TurboTrainning-main/TurboTrainning-main_uni/cmpts/public/poster/wxa-plugin-canvas/index/index.vue?2f2e","webpack:///C:/Users/liuxingyu/Desktop/TurboTrainning-main/TurboTrainning-main_uni/cmpts/public/poster/wxa-plugin-canvas/index/index.vue?263f","uni-app:///cmpts/public/poster/wxa-plugin-canvas/index/index.vue","webpack:///C:/Users/liuxingyu/Desktop/TurboTrainning-main/TurboTrainning-main_uni/cmpts/public/poster/wxa-plugin-canvas/index/index.vue?0ce0","webpack:///C:/Users/liuxingyu/Desktop/TurboTrainning-main/TurboTrainning-main_uni/cmpts/public/poster/wxa-plugin-canvas/index/index.vue?403d"],"names":["drawBlock","width","height","x","y","paddingLeft","paddingRight","borderWidth","backgroundColor","borderColor","borderRadius","opacity","blockWidth","textAlign","textCon","textY","textX","Object","drawText","fontSize","color","baseLine","text","lineNum","lineHeight","preText","drawImage","w","h","sx","sy","sw","sh","img","resolve","drawLine","startY","endX","endY","downloadResource","images","pixelRatio","initCanvas","platform","pxWidth","pxHeight","debug","setTimeout","_drawRadiusRect","_getTextWidth","texts","marginLeft","marginRight","_drawSingleText","textDecoration","fontWeight","fontStyle","fontFamily","fillText","textArr","line","textWidth","lineY","_downloadImageAndInfo","url","zIndex","then","imgInfo","console","type","imgPath","catch","_downImage","uni","success","reject","fail","_getImageInfo","src","index","toPx","toRpx","_mapHttpToHttps","urlComponent","data","props","created","screenWidth","methods","getHeight","heightArr","item","i","canvasHeight","create","config","queue","concat","blocks","lines","canvas","detail","icon","title","initCtx","in","select","fields","node","exec","main","handle","helper"],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAkH;AAClH;AACyD;AACL;AACa;;;AAGjE;AACgM;AAChM,gBAAgB,yMAAU;AAC1B,EAAE,2EAAM;AACR,EAAE,gFAAM;AACR,EAAE,yFAAe;AACjB;AACA;AACA;AACA;AACA;AACA,EAAE,oFAAU;AACZ;AACA;;AAEA;AACe,gF;;;;;;;;;;;;ACvBf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;ACAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;ACRA;AAAA;AAAA;AAAA;AAAsuB,CAAgB,2vBAAG,EAAC,C;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACQ1vB;EACA;AACA;AACA;AACA;EACAA;IAAA;MAAA;MAAAC;MAAAC;MAAAC;MAAAC;MAAA;MAAAC;MAAA;MAAAC;MAAAC;MAAAC;MAAAC;MAAA;MAAAC;MAAA;MAAAC;IACA;IACA;IACA;IACA;IACA;MACA;MACA;MACAC;MACAA;MACA;QAAAC;QAAAC;MACAC;MACA;QACA;QACAC;MACA;QACAA;MACA;QACAA;MACA;IACA;MACAJ;IACA;IACA;MACA;MACA;MACA;MACA;MACA;QACA;QACA;QACA;MACA;QACA;MACA;MACA;IACA;IACA;MACA;MACA;MACA;MACA;MACA;MACA;QACA;QACA;QACA;MACA;QACA;MACA;MACA;IACA;IACA;MACA,cACAK;QACAd;QACAC;MACA,GACA;IACA;EACA;EACA;AACA;AACA;AACA;EACAc;IAAA;IACA;MAAAd;MAAAe;MAAAC;MAAAC;MAAAR;MAAAS;MAAA;MAAAX;MAAAV;MAAAsB;MAAAC;IACA;MACA;QACArB;QACAC;QACAiB;MACA;MACAC;QACAG;QACA,sCACAR,sCACAQ,SACA,CACA;QACAA;MACA;IACA;MACA;IACA;EACA;EACA;AACA;AACA;AACA;EACAC;IAAA;IAAA;MAAAvB;MAAAC;MAAAuB;MAAAC;MAAAC;MAAAC;MAAAC;MAAAC;MAAA;MAAAtB;MAAA;MAAAH;MAAAE;IACA;MACA;MACAwB;QACA;QACA;UACA;UACA;UACA;UACA;UACA;UACA;YACA;YACA;YACA;UACA;QACA;UACA;QACA;QACA;QACAC;MACA;MACAD;IACA;EACA;EACA;AACA;AACA;AACA;EACAE;IAAA;MAAAC;MAAAC;MAAAC;MAAAlB;MAAAnB;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;EACA;EACAsC;IAAA;IAAA;MAAAC;MAAAC;IACA;IACA;IACA;IACAD;MAAA;IAAA;IACA;EACA;EACAE;IAAA;IACA;MAAAC;IACA;MACA;QACA;UACAC;UACAC;UACAC;QACA;QACA;QACAC;UACAb;QACA;MACA;QACA,eACA;UACAU;UACAC;UACAC;QACA,GACAZ,QACA;MACA;IACA;EACA;AACA;AACA;EACA;AACA;AACA;EACAc;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;EACA;EACA;AACA;AACA;AACA;EACAC;IAAA;IACA;IACA;MACAC;IACA;MACAA;IACA;IACA;IACAA;MAAA;QAAA5B;QAAA;QAAA6B;QAAA;QAAAC;MACA;MACAnD;IACA;IACA;EACA;EACA;AACA;AACA;EACAoD,iDAgBA;IAAA;IAAA,IAfAlD;MACAC;MACAe;MACAC;MACAC;MAAA,wBACAR;MAAAA;MACAS;MAAA,sBACAX;MAAAA;MAAA,6BACA2C;MAAAA;MACArD;MAAA,sBACAsB;MAAAA;MAAA,yBACAC;MAAAA;MAAA,yBACA+B;MAAAA;MAAA,wBACAC;MAAAA;MAAA,yBACAC;MAAAA;IAEA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;MACA;MACA;MACA;MACA;QACA;QACAC;QACA;UACA;YACA;cACAA;YACA;UACA;UACA;YACAC;UACA;UACAD;UACAE;QACA;UACA;YACA;cACAD;YACA;UACA;QACA;MACA;MACAE;IACA;MACAF;IACA;IACAA;MACA;IACA;IACA;;IAEA;IACA;MACA;MACA;QACA;QACAG;;QAEA;QACA;;QAEA;QACA;UACA;YACAA;YACA;UACA;YACA;UACA;YACAA;YACA;UACA;YACAA;YACA;QAAA;MAEA;MACA;MACA;MACA;MACA;MACA;MACA;IACA;IACA;EACA;AACA;AACA;EACA;AACA;AACA;EACAC;IAAA;IACA;MACA;QAAA3D;QAAA4D;QAAAC;MACA;MACA;MACA;MACA;MAAA,CACAC;QAAA;MAAA,GACAA;QAAA;UAAAC;QACAC;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;UACAvC;UACAC;QACA;UACAA;UACAD;QACA;QACA;UACA;QACA;QACA;UACAwC;UACA3D;UACAH;UACAE;UACAwD;UACAK;UACAzC;UACAC;UACAC;UACAC;UACA7B;UACAC;UACAuB;UACAC;QACA;QACAM;MACA,GACAqC;QAAA;MAAA;IACA;EACA;EACA;AACA;AACA;AACA;EACAC;IAAA;IACA;MACA;QACA;QACAtC;MACA;;MAEA;QACAuC;UACAT;UACAU;YACA;cACAxC;YACA;cACAyC;YACA;UACA;UACAC;YACAD;UACA;QACA;MACA;QACA;QACAzC;MACA;IACA;EACA;EACA;AACA;AACA;AACA;AACA;EACA2C;IACA;MACAJ;QACAK;QACAJ;UACAxC;YACAoC;YACAH;YACAY;UACA;QACA;QACAH;UACAD;QACA;MACA;IACA;EACA;EACAK;IACA;MACA;IACA;IACA;EACA;EACAC;IACA;MACA;IACA;IACA;EACA;EACA;AACA;AACA;AACA;EACAC;IACA;MACA;IACA;IACA;IACA;MACA;QACAC;QACA;MACA;IACA;IACA;EACA;AACA;AAAA,eACA;EACAC;IACA;MACAxC;MACAC;MACAC;IACA;EACA;EACAuC;EACAC;IACA;IACA;MAAAC;IACA;IACA;EACA;EACAC,uBACA;IACA;AACA;AACA;AACA;IACAC;MACA;QACA;QACA;QACA;UACAvF;QACA;UACAA;QACA;UACAA;QACA;QACA;MACA;MACA;MACA;QACAwF;MACA;MACA;QACA;QACA;UACAC;YACAzF,uDACA0F;cACAvE;YAAA,GACA;YACAqE;UACA;QACA;UACAxF;UACAwF;QACA;MACA;MACA;QACAA;MACA;MACA;QACAA;QACAA;MACA;MACA;QAAA;MAAA;MACA;MACA;QACAG;MACA;MACA;QACA;MACA;QACA;MACA;IACA;IACAC;MAAA;MAAA;QAAA;QAAA;UAAA;YAAA;cAAA;gBAAA;gBAAA,OACA;cAAA;gBACA;gBACA5F;gBACA,sDACAgE;kBAAA;kBAAA;oBAAA;sBAAA;wBAAA;0BACA;0BACA;0BACA;;0BAEA;0BACA;4BACA;4BACA;4BACA;4BACA;0BACA;0BAAA,gBACA6B;0BACA;4BACA;0BACA;0BACAC,uBACAC,OACA/C;4BACAyC;4BACAA;4BACA;0BACA,GACA,CACAM,OACAC;4BACAP;4BACAA;4BACA;0BACA,GACA,CACAM,OACAE;4BACAR;4BACAA;4BACA;0BACA,GACA,EACA;0BACAK;4BAAA;0BAAA;0BACAJ;wBAAA;0BAAA;4BAAA;4BAAA;0BAAA;0BACAD;0BAAA,MACAA;4BAAA;4BAAA;0BAAA;0BAAA;0BAAA,OACA;wBAAA;0BAAA;0BAAA;wBAAA;0BACA;4BACA;0BACA;4BACA;0BACA;4BACA;0BACA;wBAAA;0BAVAC;0BAAA;0BAAA;wBAAA;0BAYAnB,yBACA;4BACA2B;4BACA1B;8BACA;gCACA2B;8BACA;4BACA;4BACAzB;8BACA;gCACAyB;8BACA;4BACA;0BACA,GACA,OACA;wBAAA;wBAAA;0BAAA;sBAAA;oBAAA;kBAAA;gBAAA,CACA,IACA9B;kBACAE;oBACA6B;oBACAC;kBACA;kBACAnC;gBACA;cAAA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA;IACA;IACAoC;MAAA;MACA;QACA/B,0BACAgC,YACAC,oBACAC;UACAC;QACA,GACAC;UACA;UACA;UACA3E;QACA;MACA;IACA;EACA,GACA4E,MACAC,QACAC;AAEA;AAAA,2B;;;;;;;;;;;;;AC3mBA;AAAA;AAAA;AAAA;AAA8iC,CAAgB,wiCAAG,EAAC,C;;;;;;;;;;;ACAlkC;AACA,OAAO,KAAU,EAAE,kBAKd","file":"cmpts/public/poster/wxa-plugin-canvas/index/index.js","sourcesContent":["import { render, staticRenderFns, recyclableRender, components } from \"./index.vue?vue&type=template&id=4818e5c7&\"\nvar renderjs\nimport script from \"./index.vue?vue&type=script&lang=js&\"\nexport * from \"./index.vue?vue&type=script&lang=js&\"\nimport style0 from \"./index.vue?vue&type=style&index=0&lang=css&\"\n\n\n/* normalize component */\nimport normalizer from \"!D:\\\\HBuilderX.4.55.2025030718\\\\HBuilderX\\\\plugins\\\\uniapp-cli\\\\node_modules\\\\@dcloudio\\\\vue-cli-plugin-uni\\\\packages\\\\vue-loader\\\\lib\\\\runtime\\\\componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null,\n  false,\n  components,\n  renderjs\n)\n\ncomponent.options.__file = \"cmpts/public/poster/wxa-plugin-canvas/index/index.vue\"\nexport default component.exports","export * from \"-!D:\\\\HBuilderX.4.55.2025030718\\\\HBuilderX\\\\plugins\\\\uniapp-cli\\\\node_modules\\\\@dcloudio\\\\vue-cli-plugin-uni\\\\packages\\\\vue-loader\\\\lib\\\\loaders\\\\templateLoader.js??vue-loader-options!D:\\\\HBuilderX.4.55.2025030718\\\\HBuilderX\\\\plugins\\\\uniapp-cli\\\\node_modules\\\\@dcloudio\\\\vue-cli-plugin-uni\\\\packages\\\\webpack-preprocess-loader\\\\index.js??ref--17-0!D:\\\\HBuilderX.4.55.2025030718\\\\HBuilderX\\\\plugins\\\\uniapp-cli\\\\node_modules\\\\@dcloudio\\\\webpack-uni-mp-loader\\\\lib\\\\template.js!D:\\\\HBuilderX.4.55.2025030718\\\\HBuilderX\\\\plugins\\\\uniapp-cli\\\\node_modules\\\\@dcloudio\\\\vue-cli-plugin-uni\\\\packages\\\\webpack-uni-app-loader\\\\page-meta.js!D:\\\\HBuilderX.4.55.2025030718\\\\HBuilderX\\\\plugins\\\\uniapp-cli\\\\node_modules\\\\@dcloudio\\\\vue-cli-plugin-uni\\\\packages\\\\vue-loader\\\\lib\\\\index.js??vue-loader-options!D:\\\\HBuilderX.4.55.2025030718\\\\HBuilderX\\\\plugins\\\\uniapp-cli\\\\node_modules\\\\@dcloudio\\\\webpack-uni-mp-loader\\\\lib\\\\style.js!./index.vue?vue&type=template&id=4818e5c7&\"","var components\nvar render = function () {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n}\nvar recyclableRender = false\nvar staticRenderFns = []\nrender._withStripped = true\n\nexport { render, staticRenderFns, recyclableRender, components }","import mod from \"-!D:\\\\HBuilderX.4.55.2025030718\\\\HBuilderX\\\\plugins\\\\uniapp-cli\\\\node_modules\\\\babel-loader\\\\lib\\\\index.js!D:\\\\HBuilderX.4.55.2025030718\\\\HBuilderX\\\\plugins\\\\uniapp-cli\\\\node_modules\\\\@dcloudio\\\\vue-cli-plugin-uni\\\\packages\\\\webpack-preprocess-loader\\\\index.js??ref--13-1!D:\\\\HBuilderX.4.55.2025030718\\\\HBuilderX\\\\plugins\\\\uniapp-cli\\\\node_modules\\\\@dcloudio\\\\webpack-uni-mp-loader\\\\lib\\\\script.js!D:\\\\HBuilderX.4.55.2025030718\\\\HBuilderX\\\\plugins\\\\uniapp-cli\\\\node_modules\\\\@dcloudio\\\\vue-cli-plugin-uni\\\\packages\\\\vue-loader\\\\lib\\\\index.js??vue-loader-options!D:\\\\HBuilderX.4.55.2025030718\\\\HBuilderX\\\\plugins\\\\uniapp-cli\\\\node_modules\\\\@dcloudio\\\\webpack-uni-mp-loader\\\\lib\\\\style.js!./index.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!D:\\\\HBuilderX.4.55.2025030718\\\\HBuilderX\\\\plugins\\\\uniapp-cli\\\\node_modules\\\\babel-loader\\\\lib\\\\index.js!D:\\\\HBuilderX.4.55.2025030718\\\\HBuilderX\\\\plugins\\\\uniapp-cli\\\\node_modules\\\\@dcloudio\\\\vue-cli-plugin-uni\\\\packages\\\\webpack-preprocess-loader\\\\index.js??ref--13-1!D:\\\\HBuilderX.4.55.2025030718\\\\HBuilderX\\\\plugins\\\\uniapp-cli\\\\node_modules\\\\@dcloudio\\\\webpack-uni-mp-loader\\\\lib\\\\script.js!D:\\\\HBuilderX.4.55.2025030718\\\\HBuilderX\\\\plugins\\\\uniapp-cli\\\\node_modules\\\\@dcloudio\\\\vue-cli-plugin-uni\\\\packages\\\\vue-loader\\\\lib\\\\index.js??vue-loader-options!D:\\\\HBuilderX.4.55.2025030718\\\\HBuilderX\\\\plugins\\\\uniapp-cli\\\\node_modules\\\\@dcloudio\\\\webpack-uni-mp-loader\\\\lib\\\\style.js!./index.vue?vue&type=script&lang=js&\"","<template>\n    <!-- index.wxml -->\n    <view class=\"container\">\n        <canvas id=\"canvasid\" type=\"2d\" :class=\"'canvas ' + (debug ? 'debug' : 'pro')\" :style=\"'width: ' + pxWidth + 'px; height: ' + pxHeight + 'px;'\"></canvas>\n    </view>\n</template>\n\n<script>\nconst main = {\n    /**\n     * 渲染块\n     * @param {Object} params\n     */\n    drawBlock({ text, width = 0, height, x, y, paddingLeft = 0, paddingRight = 0, borderWidth, backgroundColor, borderColor, borderRadius = 0, opacity = 1 }) {\n        // 判断是否块内有文字\n        let blockWidth = 0; // 块的宽度\n        let textX = 0;\n        let textY = 0;\n        if (typeof text !== 'undefined') {\n            // 如果有文字并且块的宽度小于文字宽度，块的宽度为 文字的宽度 + 内边距\n            const textWidth = this._getTextWidth(typeof text.text === 'string' ? text : text.text);\n            blockWidth = textWidth > width ? textWidth : width;\n            blockWidth += paddingLeft + paddingLeft;\n            const { textAlign = 'left', text: textCon } = text;\n            textY = height / 2 + y; // 文字的y轴坐标在块中线\n            if (textAlign === 'left') {\n                // 如果是右对齐，那x轴在块的最左边\n                textX = x + paddingLeft;\n            } else if (textAlign === 'center') {\n                textX = blockWidth / 2 + x;\n            } else {\n                textX = x + blockWidth - paddingRight;\n            }\n        } else {\n            blockWidth = width;\n        }\n        if (backgroundColor) {\n            // 画面\n            this.ctx.save();\n            this.ctx.globalAlpha = opacity;\n            this.ctx.fillStyle = backgroundColor;\n            if (borderRadius > 0) {\n                // 画圆角矩形\n                this._drawRadiusRect(x, y, blockWidth, height, borderRadius);\n                this.ctx.fill();\n            } else {\n                this.ctx.fillRect(this.toPx(x), this.toPx(y), this.toPx(blockWidth), this.toPx(height));\n            }\n            this.ctx.restore();\n        }\n        if (borderWidth) {\n            // 画线\n            this.ctx.save();\n            this.ctx.globalAlpha = opacity;\n            this.ctx.strokeStyle = borderColor;\n            this.ctx.lineWidth = this.toPx(borderWidth);\n            if (borderRadius > 0) {\n                // 画圆角矩形边框\n                this._drawRadiusRect(x, y, blockWidth, height, borderRadius);\n                this.ctx.stroke();\n            } else {\n                this.ctx.strokeRect(this.toPx(x), this.toPx(y), this.toPx(blockWidth), this.toPx(height));\n            }\n            this.ctx.restore();\n        }\n        if (text) {\n            this.drawText(\n                Object.assign(text, {\n                    x: textX,\n                    y: textY\n                })\n            );\n        }\n    },\n    /**\n     * 渲染文字\n     * @param {Object} params\n     */\n    drawText(params) {\n        const { x, y, fontSize, color, baseLine, textAlign, text, opacity = 1, width, lineNum, lineHeight } = params;\n        if (Object.prototype.toString.call(text) === '[object Array]') {\n            let preText = {\n                x,\n                y,\n                baseLine\n            };\n            text.forEach((item) => {\n                preText.x += this.toPx(item.marginLeft || 0);\n                const textWidth = this._drawSingleText(\n                    Object.assign(item, {\n                        ...preText\n                    })\n                );\n                preText.x += textWidth + this.toPx(item.marginRight || 0); // 下一段字的x轴为上一段字x + 上一段字宽度\n            });\n        } else {\n            this._drawSingleText(params);\n        }\n    },\n    /**\n     * 渲染图片\n     * @param {Object} params\n     */\n    drawImage({ imgPath, x, y, w, h, sx, sy, sw, sh, borderRadius = 0, borderWidth = 0, borderColor }) {\n        return new Promise((resolve) => {\n            const img = this.node.createImage();\n            img.onload = () => {\n                this.ctx.save();\n                if (borderRadius > 0) {\n                    this._drawRadiusRect(x, y, w, h, borderRadius);\n                    this.ctx.strokeStyle = 'rgba(255,255,255,0)';\n                    this.ctx.stroke();\n                    this.ctx.clip();\n                    this.ctx.drawImage(img, this.toPx(sx), this.toPx(sy), this.toPx(sw), this.toPx(sh), this.toPx(x), this.toPx(y), this.toPx(w), this.toPx(h));\n                    if (borderWidth > 0) {\n                        this.ctx.strokeStyle = borderColor;\n                        this.ctx.lineWidth = this.toPx(borderWidth);\n                        this.ctx.stroke();\n                    }\n                } else {\n                    this.ctx.drawImage(img, this.toPx(sx), this.toPx(sy), this.toPx(sw), this.toPx(sh), this.toPx(x), this.toPx(y), this.toPx(w), this.toPx(h));\n                }\n                this.ctx.restore();\n                resolve();\n            };\n            img.src = imgPath;\n        });\n    },\n    /**\n     * 渲染线\n     * @param {Object} param\n     */\n    drawLine({ startX, startY, endX, endY, color, width }) {\n        this.ctx.save();\n        this.ctx.beginPath();\n        this.ctx.strokeStyle = color;\n        this.ctx.lineWidth = this.toPx(width);\n        this.ctx.moveTo(this.toPx(startX), this.toPx(startY));\n        this.ctx.lineTo(this.toPx(endX), this.toPx(endY));\n        this.ctx.stroke();\n        this.ctx.closePath();\n        this.ctx.restore();\n    },\n    downloadResource({ images = [], pixelRatio }) {\n        // 本方法比create早执行，所以要预先设定ratio by cc 2021/10/25\n        this.pixelRatio = pixelRatio || this.pixelRatio;\n        const drawList = [];\n        images.forEach((image, index) => drawList.push(this._downloadImageAndInfo(image, index)));\n        return Promise.all(drawList);\n    },\n    initCanvas(w, h, debug) {\n        const { platform } = uni.getSystemInfoSync();\n        return new Promise((resolve) => {\n            if (platform === 'ios') {\n                this.setData({\n                    pxWidth: this.toPx(w),\n                    pxHeight: this.toPx(h),\n                    debug\n                });\n                // ios系统动态设置canvas宽高后立即绘制canvas会偶现变形的BUG\n                setTimeout(() => {\n                    resolve();\n                }, 100);\n            } else {\n                this.setData(\n                    {\n                        pxWidth: this.toPx(w),\n                        pxHeight: this.toPx(h),\n                        debug\n                    },\n                    resolve\n                );\n            }\n        });\n    }\n};\nconst handle = {\n    /**\n     * 画圆角矩形\n     */\n    _drawRadiusRect(x, y, w, h, r) {\n        const br = r / 2;\n        this.ctx.beginPath();\n        this.ctx.moveTo(this.toPx(x + br), this.toPx(y)); // 移动到左上角的点\n        this.ctx.lineTo(this.toPx(x + w - br), this.toPx(y));\n        this.ctx.arc(this.toPx(x + w - br), this.toPx(y + br), this.toPx(br), 2 * Math.PI * 0.75, 2 * Math.PI * 1);\n        this.ctx.lineTo(this.toPx(x + w), this.toPx(y + h - br));\n        this.ctx.arc(this.toPx(x + w - br), this.toPx(y + h - br), this.toPx(br), 0, 2 * Math.PI * 0.25);\n        this.ctx.lineTo(this.toPx(x + br), this.toPx(y + h));\n        this.ctx.arc(this.toPx(x + br), this.toPx(y + h - br), this.toPx(br), 2 * Math.PI * 0.25, 2 * Math.PI * 0.5);\n        this.ctx.lineTo(this.toPx(x), this.toPx(y + br));\n        this.ctx.arc(this.toPx(x + br), this.toPx(y + br), this.toPx(br), 2 * Math.PI * 0.5, 2 * Math.PI * 0.75);\n    },\n    /**\n     * 计算文本长度\n     * @param {Array|Object}} text 数组 或者 对象\n     */\n    _getTextWidth(text) {\n        let texts = [];\n        if (Object.prototype.toString.call(text) === '[object Object]') {\n            texts.push(text);\n        } else {\n            texts = text;\n        }\n        let width = 0;\n        texts.forEach(({ fontSize, text, marginLeft = 0, marginRight = 0 }) => {\n            this.ctx.fontSize = this.toPx(fontSize);\n            width += this.ctx.measureText(text).width + marginLeft + marginRight;\n        });\n        return this.toRpx(width);\n    },\n    /**\n     * 渲染一段文字\n     */\n    _drawSingleText({\n        x,\n        y,\n        fontSize,\n        color,\n        baseLine,\n        textAlign = 'left',\n        text,\n        opacity = 1,\n        textDecoration = 'none',\n        width,\n        lineNum = 1,\n        lineHeight = 0,\n        fontWeight = 'normal',\n        fontStyle = 'normal',\n        fontFamily = 'sans-serif'\n    }) {\n        this.ctx.save();\n        this.ctx.beginPath();\n        this.ctx.font = fontStyle + ' ' + fontWeight + ' ' + this.toPx(fontSize, true) + 'px ' + fontFamily;\n        this.ctx.globalAlpha = opacity;\n        this.ctx.fillStyle = color;\n        this.ctx.textBaseline = baseLine;\n        this.ctx.textAlign = textAlign;\n        let textWidth = this.toRpx(this.ctx.measureText(text).width);\n        const textArr = [];\n        if (textWidth > width) {\n            // 文本宽度 大于 渲染宽度\n            let fillText = '';\n            let line = 1;\n            for (let i = 0; i <= text.length - 1; i++) {\n                // 将文字转为数组，一行文字一个元素\n                fillText = fillText + text[i];\n                if (this.toRpx(this.ctx.measureText(fillText).width) >= width) {\n                    if (line === lineNum) {\n                        if (i !== text.length - 1) {\n                            fillText = fillText.substring(0, fillText.length - 1) + '...';\n                        }\n                    }\n                    if (line <= lineNum) {\n                        textArr.push(fillText);\n                    }\n                    fillText = '';\n                    line++;\n                } else {\n                    if (line <= lineNum) {\n                        if (i === text.length - 1) {\n                            textArr.push(fillText);\n                        }\n                    }\n                }\n            }\n            textWidth = width;\n        } else {\n            textArr.push(text);\n        }\n        textArr.forEach((item, index) => {\n            this.ctx.fillText(item, this.toPx(x), this.toPx(y + (lineHeight || fontSize) * index));\n        });\n        this.ctx.restore();\n\n        // textDecoration\n        if (textDecoration !== 'none') {\n            let lineY = y;\n            if (textDecoration === 'line-through') {\n                // 目前只支持贯穿线\n                lineY = y;\n\n                // 小程序画布baseLine偏移阈值\n                let threshold = 5;\n\n                // 根据baseLine的不同对贯穿线的Y坐标做相应调整\n                switch (baseLine) {\n                    case 'top':\n                        lineY += fontSize / 2 + threshold;\n                        break;\n                    case 'middle':\n                        break;\n                    case 'bottom':\n                        lineY -= fontSize / 2 + threshold;\n                        break;\n                    default:\n                        lineY -= fontSize / 2 - threshold;\n                        break;\n                }\n            }\n            this.ctx.save();\n            this.ctx.moveTo(this.toPx(x), this.toPx(lineY));\n            this.ctx.lineTo(this.toPx(x) + this.toPx(textWidth), this.toPx(lineY));\n            this.ctx.strokeStyle = color;\n            this.ctx.stroke();\n            this.ctx.restore();\n        }\n        return textWidth;\n    }\n};\nconst helper = {\n    /**\n     * 下载图片并获取图片信息\n     */\n    _downloadImageAndInfo(image, index) {\n        return new Promise((resolve, reject) => {\n            const { x, y, url, zIndex } = image;\n            const imageUrl = url;\n            // 下载图片\n            this._downImage(imageUrl, index)\n                // 获取图片信息\n                .then((imgPath) => this._getImageInfo(imgPath, index))\n                .then(({ imgPath, imgInfo }) => {\n                    console.log();\n                    // 根据画布的宽高计算出图片绘制的大小，这里会保证图片绘制不变形\n                    let sx;\n                    let sy;\n                    const borderRadius = image.borderRadius || 0;\n                    const setWidth = image.width;\n                    const setHeight = image.height;\n                    const width = this.toRpx(imgInfo.width);\n                    const height = this.toRpx(imgInfo.height);\n                    if (width / height <= setWidth / setHeight) {\n                        sx = 0;\n                        sy = (height - (width / setWidth) * setHeight) / 2;\n                    } else {\n                        sy = 0;\n                        sx = (width - (height / setHeight) * setWidth) / 2;\n                    }\n                    if (!this.drawArr) {\n                        this.drawArr = [];\n                    }\n                    this.drawArr.push({\n                        type: 'image',\n                        borderRadius,\n                        borderWidth: image.borderWidth,\n                        borderColor: image.borderColor,\n                        zIndex: typeof zIndex !== 'undefined' ? zIndex : index,\n                        imgPath,\n                        sx,\n                        sy,\n                        sw: width - sx * 2,\n                        sh: height - sy * 2,\n                        x,\n                        y,\n                        w: setWidth,\n                        h: setHeight\n                    });\n                    resolve();\n                })\n                .catch((err) => reject(err));\n        });\n    },\n    /**\n     * 下载图片资源\n     * @param {*} imageUrl\n     */\n    _downImage(imageUrl) {\n        return new Promise((resolve, reject) => {\n            if (imageUrl.startsWith('http') || imageUrl.includes('tmp') || imageUrl.includes('temp') || imageUrl.includes('wxfile')) {\n                // 支持本地地址\n                resolve(imageUrl); //2021/2/17 by cc\n            }\n\n            if (/^http/.test(imageUrl) && !new RegExp(uni.env.USER_DATA_PATH).test(imageUrl)) {\n                uni.downloadFile({\n                    url: this._mapHttpToHttps(imageUrl),\n                    success: (res) => {\n                        if (res.statusCode === 200) {\n                            resolve(res.tempFilePath);\n                        } else {\n                            reject(res.errMsg);\n                        }\n                    },\n                    fail(err) {\n                        reject(err);\n                    }\n                });\n            } else {\n                // 支持本地地址\n                resolve(imageUrl);\n            }\n        });\n    },\n    /**\n     * 获取图片信息\n     * @param {*} imgPath\n     * @param {*} index\n     */\n    _getImageInfo(imgPath, index) {\n        return new Promise((resolve, reject) => {\n            uni.getImageInfo({\n                src: imgPath,\n                success(res) {\n                    resolve({\n                        imgPath,\n                        imgInfo: res,\n                        index\n                    });\n                },\n                fail(err) {\n                    reject(err);\n                }\n            });\n        });\n    },\n    toPx(rpx, int) {\n        if (int) {\n            return parseInt(rpx * this.factor * this.pixelRatio);\n        }\n        return rpx * this.factor * this.pixelRatio;\n    },\n    toRpx(px, int) {\n        if (int) {\n            return parseInt(px / (this.factor * this.pixelRatio));\n        }\n        return px / (this.factor * this.pixelRatio);\n    },\n    /**\n     * 将http转为https\n     * @param {String}} rawUrl 图片资源url\n     */\n    _mapHttpToHttps(rawUrl) {\n        if (rawUrl.indexOf(':') < 0) {\n            return rawUrl;\n        }\n        const urlComponent = rawUrl.split(':');\n        if (urlComponent.length === 2) {\n            if (urlComponent[0] === 'http') {\n                urlComponent[0] = 'https';\n                return `${urlComponent[0]}:${urlComponent[1]}`;\n            }\n        }\n        return rawUrl;\n    }\n};\nexport default {\n    data() {\n        return {\n            pxWidth: '',\n            pxHeight: '',\n            debug: ''\n        };\n    },\n    props: {},\n    created() {\n        const sysInfo = uni.getSystemInfoSync();\n        const { pixelRatio, screenWidth } = sysInfo;\n        this.factor = screenWidth / 750;\n        this.pixelRatio = pixelRatio;\n    },\n    methods: Object.assign(\n        {\n            /**\n             * 计算画布的高度\n             * @param {*} config\n             */\n            getHeight(config) {\n                const getTextHeight = (text) => {\n                    let fontHeight = text.lineHeight || text.fontSize;\n                    let height = 0;\n                    if (text.baseLine === 'top') {\n                        height = fontHeight;\n                    } else if (text.baseLine === 'middle') {\n                        height = fontHeight / 2;\n                    } else {\n                        height = 0;\n                    }\n                    return height;\n                };\n                const heightArr = [];\n                (config.blocks || []).forEach((item) => {\n                    heightArr.push(item.y + item.height);\n                });\n                (config.texts || []).forEach((item) => {\n                    let height;\n                    if (Object.prototype.toString.call(item.text) === '[object Array]') {\n                        item.text.forEach((i) => {\n                            height = getTextHeight({\n                                ...i,\n                                baseLine: item.baseLine\n                            });\n                            heightArr.push(item.y + height);\n                        });\n                    } else {\n                        height = getTextHeight(item);\n                        heightArr.push(item.y + height);\n                    }\n                });\n                (config.images || []).forEach((item) => {\n                    heightArr.push(item.y + item.height);\n                });\n                (config.lines || []).forEach((item) => {\n                    heightArr.push(item.startY);\n                    heightArr.push(item.endY);\n                });\n                const sortRes = heightArr.sort((a, b) => b - a);\n                let canvasHeight = 0;\n                if (sortRes.length > 0) {\n                    canvasHeight = sortRes[0];\n                }\n                if (config.height < canvasHeight || !config.height) {\n                    return canvasHeight;\n                } else {\n                    return config.height;\n                }\n            },\n            async create(config) {\n                await this.initCtx();\n                this.pixelRatio = config.pixelRatio || this.pixelRatio;\n                const height = this.getHeight(config);\n                this.initCanvas(config.width, height, config.debug)\n                    .then(async () => {\n                        this.node.width = this.pxWidth * this.pixelRatio;\n                        this.node.height = this.pxHeight * this.pixelRatio;\n                        this.ctx.scale(this.pixelRatio, this.pixelRatio);\n\n                        // 设置画布底色\n                        if (config.backgroundColor) {\n                            this.ctx.save();\n                            this.ctx.fillStyle = config.backgroundColor;\n                            this.ctx.fillRect(0, 0, this.toPx(config.width), this.toPx(height));\n                            this.ctx.restore();\n                        }\n                        const { texts = [], blocks = [], lines = [] } = config;\n                        if (!this.drawArr) {\n                            this.drawArr = [];\n                        }\n                        const queue = this.drawArr\n                            .concat(\n                                texts.map((item) => {\n                                    item.type = 'text';\n                                    item.zIndex = item.zIndex || 0;\n                                    return item;\n                                })\n                            )\n                            .concat(\n                                blocks.map((item) => {\n                                    item.type = 'block';\n                                    item.zIndex = item.zIndex || 0;\n                                    return item;\n                                })\n                            )\n                            .concat(\n                                lines.map((item) => {\n                                    item.type = 'line';\n                                    item.zIndex = item.zIndex || 0;\n                                    return item;\n                                })\n                            );\n                        // 按照顺序排序\n                        queue.sort((a, b) => a.zIndex - b.zIndex);\n                        for (let i = 0, len = queue.length; i < len; i++) {\n                            const item = queue[i];\n                            if (item.type === 'image') {\n                                await this.drawImage(item);\n                            } else if (item.type === 'text') {\n                                this.drawText(item);\n                            } else if (item.type === 'block') {\n                                this.drawBlock(item);\n                            } else if (item.type === 'line') {\n                                this.drawLine(item);\n                            }\n                        }\n                        uni.canvasToTempFilePath(\n                            {\n                                canvas: this.node,\n                                success: (res) => {\n                                    this.$emit('success', {\n                                        detail: res.tempFilePath\n                                    });\n                                },\n                                fail: (err) => {\n                                    this.$emit('fail', {\n                                        detail: err\n                                    });\n                                }\n                            },\n                            this\n                        );\n                    })\n                    .catch((err) => {\n                        uni.showToast({\n                            icon: 'none',\n                            title: err.errMsg || '生成失败'\n                        });\n                        console.error(err);\n                    });\n            },\n            initCtx() {\n                return new Promise((resolve) => {\n                    uni.createSelectorQuery()\n                        .in(this)\n                        .select('#canvasid')\n                        .fields({\n                            node: true\n                        })\n                        .exec((res) => {\n                            this.node = res[0].node;\n                            this.ctx = this.node.getContext('2d');\n                            resolve();\n                        });\n                });\n            }\n        },\n        main,\n        handle,\n        helper\n    )\n};\n</script>\n<style>\n.canvas {\n    width: 750rpx;\n    height: 750rpx;\n}\n.canvas.pro {\n    position: absolute;\n    bottom: 0;\n    left: 0;\n    transform: translate3d(-9999rpx, 0, 0);\n}\n.canvas.debug {\n    position: absolute;\n    bottom: 0;\n    left: 0;\n    border: 1rpx solid #ccc;\n}\n</style>\n","import mod from \"-!D:\\\\HBuilderX.4.55.2025030718\\\\HBuilderX\\\\plugins\\\\uniapp-cli\\\\node_modules\\\\mini-css-extract-plugin\\\\dist\\\\loader.js??ref--6-oneOf-1-0!D:\\\\HBuilderX.4.55.2025030718\\\\HBuilderX\\\\plugins\\\\uniapp-cli\\\\node_modules\\\\css-loader\\\\dist\\\\cjs.js??ref--6-oneOf-1-1!D:\\\\HBuilderX.4.55.2025030718\\\\HBuilderX\\\\plugins\\\\uniapp-cli\\\\node_modules\\\\@dcloudio\\\\vue-cli-plugin-uni\\\\packages\\\\vue-loader\\\\lib\\\\loaders\\\\stylePostLoader.js!D:\\\\HBuilderX.4.55.2025030718\\\\HBuilderX\\\\plugins\\\\uniapp-cli\\\\node_modules\\\\@dcloudio\\\\vue-cli-plugin-uni\\\\packages\\\\webpack-preprocess-loader\\\\index.js??ref--6-oneOf-1-2!D:\\\\HBuilderX.4.55.2025030718\\\\HBuilderX\\\\plugins\\\\uniapp-cli\\\\node_modules\\\\postcss-loader\\\\src\\\\index.js??ref--6-oneOf-1-3!D:\\\\HBuilderX.4.55.2025030718\\\\HBuilderX\\\\plugins\\\\uniapp-cli\\\\node_modules\\\\@dcloudio\\\\vue-cli-plugin-uni\\\\packages\\\\vue-loader\\\\lib\\\\index.js??vue-loader-options!D:\\\\HBuilderX.4.55.2025030718\\\\HBuilderX\\\\plugins\\\\uniapp-cli\\\\node_modules\\\\@dcloudio\\\\webpack-uni-mp-loader\\\\lib\\\\style.js!./index.vue?vue&type=style&index=0&lang=css&\"; export default mod; export * from \"-!D:\\\\HBuilderX.4.55.2025030718\\\\HBuilderX\\\\plugins\\\\uniapp-cli\\\\node_modules\\\\mini-css-extract-plugin\\\\dist\\\\loader.js??ref--6-oneOf-1-0!D:\\\\HBuilderX.4.55.2025030718\\\\HBuilderX\\\\plugins\\\\uniapp-cli\\\\node_modules\\\\css-loader\\\\dist\\\\cjs.js??ref--6-oneOf-1-1!D:\\\\HBuilderX.4.55.2025030718\\\\HBuilderX\\\\plugins\\\\uniapp-cli\\\\node_modules\\\\@dcloudio\\\\vue-cli-plugin-uni\\\\packages\\\\vue-loader\\\\lib\\\\loaders\\\\stylePostLoader.js!D:\\\\HBuilderX.4.55.2025030718\\\\HBuilderX\\\\plugins\\\\uniapp-cli\\\\node_modules\\\\@dcloudio\\\\vue-cli-plugin-uni\\\\packages\\\\webpack-preprocess-loader\\\\index.js??ref--6-oneOf-1-2!D:\\\\HBuilderX.4.55.2025030718\\\\HBuilderX\\\\plugins\\\\uniapp-cli\\\\node_modules\\\\postcss-loader\\\\src\\\\index.js??ref--6-oneOf-1-3!D:\\\\HBuilderX.4.55.2025030718\\\\HBuilderX\\\\plugins\\\\uniapp-cli\\\\node_modules\\\\@dcloudio\\\\vue-cli-plugin-uni\\\\packages\\\\vue-loader\\\\lib\\\\index.js??vue-loader-options!D:\\\\HBuilderX.4.55.2025030718\\\\HBuilderX\\\\plugins\\\\uniapp-cli\\\\node_modules\\\\@dcloudio\\\\webpack-uni-mp-loader\\\\lib\\\\style.js!./index.vue?vue&type=style&index=0&lang=css&\"","// extracted by mini-css-extract-plugin\n    if(module.hot) {\n      // 1741962920078\n      var cssReload = require(\"D:/HBuilderX.4.55.2025030718/HBuilderX/plugins/uniapp-cli/node_modules/mini-css-extract-plugin/dist/hmr/hotModuleReplacement.js\")(module.id, {\"hmr\":true,\"publicPath\":\"/\",\"locals\":false});\n      module.hot.dispose(cssReload);\n      module.hot.accept(undefined, cssReload);\n    }\n  "],"sourceRoot":""}